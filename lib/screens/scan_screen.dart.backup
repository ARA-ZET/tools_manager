import 'package:flutter/material.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:provider/provider.dart';
import '../core/theme/mallon_theme.dart';
import '../widgets/tool_scanner.dart';
import '../models/tool.dart';
import '../models/staff.dart';
import '../providers/tools_provider.dart';
import '../providers/staff_provider.dart';
import '../providers/scan_provider.dart';
import '../services/secure_tool_transaction_service.dart';
import '../services/staff_service.dart';
import '../services/id_mapping_service.dart';
import 'auth_debug_screen.dart';

/// Scanner screen for QR code scanning
class ScanScreen extends StatefulWidget {
  const ScanScreen({super.key});

  @override
  State<ScanScreen> createState() => _ScanScreenState();
}

class _ScanScreenState extends State<ScanScreen> with TickerProviderStateMixin {
  late TabController _tabController;
  final TextEditingController _searchController = TextEditingController();
  final TextEditingController _manualSearchController = TextEditingController();

  // Services (kept for compatibility during transition)
  final SecureToolTransactionService _secureTransactionService =
      SecureToolTransactionService();
  final StaffService _staffService = StaffService();
  final IdMappingService _idMappingService = IdMappingService();

  // Temporary state variables - to be gradually replaced with ScanProvider
  String _searchQuery = '';
  String _selectedFilter = 'all';
  Staff? _currentStaff;

  // Provider-backed getters
  bool get _batchMode => context.read<ScanProvider>().isBatchMode;
  List<String> get _scannedTools => context.read<ScanProvider>().scannedTools;
  bool get _isProcessing => context.read<ScanProvider>().isProcessing;
  @override
  void initState() {
    super.initState();
    _tabController = TabController(length: 2, vsync: this);

    // Add tab controller listener to handle camera lifecycle
    _tabController.addListener(_handleTabChange);

    // Initialize scan provider and load staff
    WidgetsBinding.instance.addPostFrameCallback((_) {
      context.read<ScanProvider>().initialize();
    });
    _loadCurrentStaff();
  }

  void _handleTabChange() {
    // When switching tabs, just log for debugging
    // Don't trigger rebuilds that might affect camera lifecycle
    if (_tabController.index == 0) {
      debugPrint('üì∑ Switched to Scan tab');
    } else {
      debugPrint('üìã Switched to Browse tab');
    }
  }

  /// Load current staff member from Firebase Auth (kept for compatibility)
  Future<void> _loadCurrentStaff() async {
    try {
      final user = FirebaseAuth.instance.currentUser;
      if (user != null) {
        final staff = await _staffService.getStaffByAuthUid(user.uid);
        if (mounted) {
          setState(() {
            _currentStaff = staff;
          });
        }
      }
    } catch (e) {
      debugPrint('Error loading current staff: $e');
    }
  }

  @override
  void dispose() {
    _tabController.removeListener(_handleTabChange);
    _tabController.dispose();
    _searchController.dispose();
    _manualSearchController.dispose();
    super.dispose();
  }

  bool _isDialogShowing = false; // Add dialog state tracking

  // Helper method to reset dialog state
  void _resetDialogState() {
    debugPrint('üîÑ Dialog state reset (was: $_isDialogShowing)');
    _isDialogShowing = false;
  }

  void _handleScannedCode(String code) async {
    debugPrint('üîç Scanned code: $code');

    // Prevent multiple dialogs
    if (_isDialogShowing) {
      debugPrint('üö´ Dialog already showing - ignoring scan');
      return;
    }

    final scanProvider = context.read<ScanProvider>();

    // Additional check: if already processing, ignore this scan
    if (scanProvider.isProcessing) {
      debugPrint('üö´ Already processing a scan - ignoring');
      return;
    }

    // Handle the scanned code and check if it was processed
    final wasProcessed = await scanProvider.handleScannedCode(code);

    if (!wasProcessed) {
      debugPrint('üö´ Scan was debounced or ignored - stopping here');
      return;
    }

    // If in batch mode, handle with batch-specific dialogs
    if (scanProvider.isBatchMode) {
      await _handleBatchModeResult(code, wasProcessed);
      return;
    }

    // Single scan mode - show dialog if processing
    if (scanProvider.isProcessing) {
      debugPrint('üì± Single scan mode - showing dialog');
      debugPrint(
        'üìä Current state: isDialogShowing=$_isDialogShowing, isProcessing=${scanProvider.isProcessing}',
      );
      _isDialogShowing = true; // Set flag immediately

      // Extract tool ID immediately
      String toolId = code;
      if (code.startsWith('TOOL#')) {
        toolId = code.substring(5);
      }

      // Show dialog with minimal delay
      Future.delayed(const Duration(milliseconds: 50), () {
        debugPrint(
          'üìä After delay: mounted=$mounted, isDialogShowing=$_isDialogShowing',
        );
        if (mounted && _isDialogShowing) {
          debugPrint('üì± Calling _showSingleToolDialog for $toolId');
          _showSingleToolDialog(toolId);
        } else {
          debugPrint('‚ùå Conditions not met for dialog - resetting flag');
          _isDialogShowing = false; // Reset if conditions not met
        }
      });
    }
  }

  void _showSingleToolDialog(String toolId) async {
    final scanProvider = context.read<ScanProvider>();

    debugPrint('üîß Showing dialog for tool: $toolId');

    // Ensure we're mounted
    if (!mounted) {
      debugPrint('‚ùå Not mounted - returning');
      _isDialogShowing = false; // Reset flag
      return;
    }

    // Clear any existing snackbars to prevent clutter
    ScaffoldMessenger.of(context).clearSnackBars();

    try {
      // Get the tool from the provider (cached data, much faster)
      final toolsProvider = context.read<ToolsProvider>();
      final tool = toolsProvider.getToolByUniqueId(toolId);

      debugPrint(
        'üîç Tool lookup result: ${tool != null ? "Found ${tool.displayName}" : "Not found"}',
      );

      if (tool == null) {
        if (mounted) {
          await _showToolNotFoundDialog(toolId);
        }
        return;
      }

      if (!mounted) return;

      // Check user role and show appropriate dialog
      if (scanProvider.currentStaff == null) {
        debugPrint('‚ùå No staff logged in');
        scanProvider.setProcessing(false);
        _showNotLoggedInDialog();
        _resetDialogState(); // Reset state for not-logged-in dialog
        return;
      }

      debugPrint(
        'üë§ Staff: ${scanProvider.currentStaff!.fullName} (${scanProvider.currentStaff!.role.name})',
      );

      // Show different dialogs based on user role
      if (scanProvider.currentStaff!.role.isSupervisor) {
        // Admin/Supervisor can assign tools to others
        debugPrint('üîß Showing admin dialog');
        await _showAdminToolDialog(tool);
        _resetDialogState(); // Reset when dialog closes
      } else {
        // Staff can only view tool details
        debugPrint('üëÅÔ∏è Showing staff dialog');
        await _showStaffToolDialog(tool);
        _resetDialogState(); // Reset when dialog closes
      }
    } catch (e) {
      _resetDialogState(); // Reset state on error
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Error loading tool: ${e.toString()}'),
            backgroundColor: MallonColors.error,
          ),
        );
      }
    } finally {
      // Reset processing state after dialog handling
      if (mounted) {
        scanProvider.setProcessing(false);
        debugPrint('üì± Processing state reset to false');
      }
    }
  }

  /// Show tool not found dialog
  Future<void> _showToolNotFoundDialog(String toolId) async {
    await showDialog(
      context: context,
      barrierColor: Colors.black54,
      builder: (dialogContext) => AlertDialog(
        backgroundColor: Colors.white,
        title: const Text('Tool Not Found'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Icon(Icons.search_off, size: 64, color: MallonColors.error),
            const SizedBox(height: 16),
            Text(
              'Tool "$toolId" was not found in the system.',
              textAlign: TextAlign.center,
            ),
            const SizedBox(height: 8),
            Text(
              'Please check the tool ID and try again.',
              style: TextStyle(color: MallonColors.secondaryText, fontSize: 14),
              textAlign: TextAlign.center,
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () {
              Navigator.pop(dialogContext);
              _resetDialogState(); // Reset dialog state when closing
            },
            child: const Text('OK'),
          ),
        ],
      ),
    );
  }

  /// Show login required dialog
  void _showNotLoggedInDialog() {
    final user = FirebaseAuth.instance.currentUser;

    showDialog(
      context: context,
      barrierColor: Colors.black54,
      builder: (dialogContext) => AlertDialog(
        backgroundColor: Colors.white,
        title: const Text('Authentication Issue'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            if (user == null) ...[
              const Text('You are not signed in with Firebase Auth.'),
              const SizedBox(height: 8),
              const Text('Please sign in first to scan and manage tools.'),
            ] else ...[
              const Text('Your account is not linked to a staff profile.'),
              const SizedBox(height: 8),
              Text('Firebase UID: ${user.uid}'),
              const SizedBox(height: 8),
              const Text(
                'Please contact your administrator to link your account.',
              ),
            ],
          ],
        ),
        actions: [
          if (user != null)
            TextButton(
              onPressed: () {
                Navigator.pop(dialogContext);
                _loadCurrentStaff();
              },
              child: const Text('Retry'),
            ),
          TextButton(
            onPressed: () => Navigator.pop(dialogContext),
            child: const Text('OK'),
          ),
        ],
      ),
    );
  }

  /// Show batch mode dialog when tool is not found
  Future<void> _showBatchToolNotFoundDialog(String toolId) async {
    await showDialog(
      context: context,
      barrierColor: Colors.black54,
      builder: (dialogContext) => AlertDialog(
        backgroundColor: Colors.white,
        title: const Text('Tool Not Found'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Icon(Icons.search_off, size: 64, color: MallonColors.error),
            const SizedBox(height: 16),
            Text(
              'Tool "$toolId" was not found in the system.',
              textAlign: TextAlign.center,
              style: const TextStyle(fontSize: 16),
            ),
            const SizedBox(height: 8),
            Text(
              'Please check the tool ID and try again.',
              style: TextStyle(color: MallonColors.secondaryText, fontSize: 14),
              textAlign: TextAlign.center,
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(dialogContext),
            child: const Text('Close'),
          ),
        ],
      ),
    );
  }

  /// Show batch mode dialog when tool is already in batch
  Future<void> _showBatchToolAlreadyAddedDialog(String toolId) async {
    await showDialog(
      context: context,
      barrierColor: Colors.black54,
      builder: (dialogContext) => AlertDialog(
        backgroundColor: Colors.white,
        title: const Text('Already in Batch'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Icon(
              Icons.playlist_add_check,
              size: 64,
              color: MallonColors.warning,
            ),
            const SizedBox(height: 16),
            Text(
              'Tool "$toolId" is already in your batch.',
              textAlign: TextAlign.center,
              style: const TextStyle(fontSize: 16),
            ),
            const SizedBox(height: 8),
            Text(
              'Check your batch list below.',
              style: TextStyle(color: MallonColors.secondaryText, fontSize: 14),
              textAlign: TextAlign.center,
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(dialogContext),
            child: const Text('Close'),
          ),
        ],
      ),
    );
  }

  /// Show batch mode dialog for valid tool with add/cancel options
  Future<void> _showBatchAddToolDialog(Tool tool) async {
    final result = await showDialog<bool>(
      context: context,
      barrierColor: Colors.black54,
      builder: (dialogContext) => AlertDialog(
        backgroundColor: Colors.white,
        title: const Text('Add to Batch'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // Tool details
            Container(
              padding: const EdgeInsets.all(16),
              decoration: BoxDecoration(
                color: MallonColors.surface,
                borderRadius: BorderRadius.circular(8),
                border: Border.all(color: MallonColors.outline),
              ),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Row(
                    children: [
                      Icon(Icons.build, color: MallonColors.primaryGreen),
                      const SizedBox(width: 8),
                      Expanded(
                        child: Text(
                          tool.name,
                          style: const TextStyle(
                            fontSize: 16,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                      ),
                    ],
                  ),
                  const SizedBox(height: 8),
                  Text(
                    'ID: ${tool.uniqueId}',
                    style: TextStyle(
                      color: MallonColors.secondaryText,
                      fontSize: 14,
                    ),
                  ),
                  if (tool.brand.isNotEmpty) ...[
                    const SizedBox(height: 4),
                    Text(
                      'Brand: ${tool.brand}',
                      style: TextStyle(
                        color: MallonColors.secondaryText,
                        fontSize: 14,
                      ),
                    ),
                  ],
                  if (tool.model.isNotEmpty) ...[
                    const SizedBox(height: 4),
                    Text(
                      'Model: ${tool.model}',
                      style: TextStyle(
                        color: MallonColors.secondaryText,
                        fontSize: 14,
                      ),
                    ),
                  ],
                  const SizedBox(height: 8),
                  Row(
                    children: [
                      Container(
                        padding: const EdgeInsets.symmetric(
                          horizontal: 8,
                          vertical: 4,
                        ),
                        decoration: BoxDecoration(
                          color: tool.isAvailable
                              ? MallonColors.successGreen.withValues(alpha: 0.2)
                              : MallonColors.error.withValues(alpha: 0.2),
                          borderRadius: BorderRadius.circular(4),
                        ),
                        child: Text(
                          tool.isAvailable ? 'Available' : 'Not Available',
                          style: TextStyle(
                            color: tool.isAvailable
                                ? MallonColors.successGreen
                                : MallonColors.error,
                            fontSize: 12,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                      ),
                    ],
                  ),
                ],
              ),
            ),
            const SizedBox(height: 16),
            Text(
              'Do you want to add this tool to your batch?',
              style: const TextStyle(fontSize: 16),
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(dialogContext, false),
            child: const Text('Cancel'),
          ),
          ElevatedButton(
            onPressed: () => Navigator.pop(dialogContext, true),
            style: ElevatedButton.styleFrom(
              backgroundColor: MallonColors.primaryGreen,
              foregroundColor: Colors.white,
            ),
            child: const Text('Add to Batch'),
          ),
        ],
      ),
    );

    // If user confirmed, add to batch
    if (result == true && mounted) {
      final scanProvider = context.read<ScanProvider>();
      scanProvider.addToBatch(tool.uniqueId);

      // Show success feedback
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('Added ${tool.name} to batch'),
          backgroundColor: MallonColors.successGreen,
          duration: const Duration(seconds: 2),
        ),
      );
    }
  }

  /// Handle batch mode scan results and show appropriate dialogs
  Future<void> _handleBatchModeResult(String code, bool wasProcessed) async {
    debugPrint(
      'üéØ _handleBatchModeResult called with code: $code, wasProcessed: $wasProcessed',
    );

    // Extract tool ID from code
    String toolId = code;
    if (code.startsWith('TOOL#')) {
      toolId = code.substring(5);
    }

    // Get tools provider to check if tool exists
    final toolsProvider = context.read<ToolsProvider>();
    final tool = toolsProvider.getToolByUniqueId(toolId);
    final scanProvider = context.read<ScanProvider>();

    debugPrint(
      'üîç Tool lookup for $toolId: ${tool != null ? "Found ${tool.displayName}" : "Not found"}',
    );
    debugPrint('üìä Current batch tools: ${scanProvider.scannedTools}');

    if (tool == null) {
      // Tool doesn't exist in database
      debugPrint('‚ùå Tool $toolId not found - showing not found dialog');
      _isDialogShowing = true;
      await _showBatchToolNotFoundDialog(toolId);
      _isDialogShowing = false;
      return;
    }

    // Check if tool is already in batch
    if (scanProvider.scannedTools.contains(toolId)) {
      debugPrint(
        '‚ö†Ô∏è Tool $toolId already in batch - showing already added dialog',
      );
      _isDialogShowing = true;
      await _showBatchToolAlreadyAddedDialog(toolId);
      _isDialogShowing = false;
      return;
    }

    // Tool exists and is not in batch - show confirmation dialog
    debugPrint('‚úÖ Tool $toolId is valid and new - showing add dialog');
    _isDialogShowing = true;
    await _showBatchAddToolDialog(tool);
    _isDialogShowing = false;
  }

  /// Show admin/supervisor tool dialog with assignment options
  Future<void> _showAdminToolDialog(Tool tool) async {
    try {
      // Get the latest tool data from provider to ensure it's current
      final toolsProvider = context.read<ToolsProvider>();
      final currentTool = toolsProvider.getToolByUniqueId(tool.uniqueId);

      if (currentTool == null) {
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text('Tool ${tool.uniqueId} not found'),
              backgroundColor: MallonColors.error,
            ),
          );
        }
        return;
      }

      final toolStatus = await _secureTransactionService
          .getReadableToolStatusInfo(currentTool.uniqueId);

      if (toolStatus == null) {
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: const Text('Unable to load tool status'),
              backgroundColor: MallonColors.error,
            ),
          );
        }
        return;
      }

      if (!mounted) return;

      // Show the actual tool dialog with loaded data
      await showDialog(
        context: context,
        barrierDismissible: true,
        barrierColor: Colors.black54, // Add semi-transparent background
        builder: (dialogContext) => AlertDialog(
          backgroundColor: Colors.white, // Ensure white background for dialog
          title: Text(currentTool.displayName),
          content: SingleChildScrollView(
            child: Column(
              mainAxisSize: MainAxisSize.min,
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                _buildToolInfoSection(currentTool, toolStatus),
                const SizedBox(height: 16),
                Text(
                  'Admin Actions',
                  style: Theme.of(dialogContext).textTheme.titleMedium
                      ?.copyWith(fontWeight: FontWeight.bold),
                ),
                const SizedBox(height: 8),
                Text(
                  currentTool.isAvailable
                      ? 'This tool is available and can be assigned to any staff member.'
                      : 'This tool is currently checked out and can be checked back in.',
                  style: TextStyle(color: MallonColors.secondaryText),
                ),
              ],
            ),
          ),
          actions: [
            // Three small buttons in a row
            Row(
              mainAxisSize: MainAxisSize.min,
              children: [
                // Done and New - scan another tool
                Expanded(
                  child: TextButton(
                    onPressed: () {
                      Navigator.pop(dialogContext);
                      // Reset scanner for next scan
                      context.read<ScanProvider>().resetDebounce();
                    },
                    style: TextButton.styleFrom(
                      padding: const EdgeInsets.symmetric(
                        vertical: 8,
                        horizontal: 8,
                      ),
                    ),
                    child: const Text(
                      'Done & New',
                      style: TextStyle(fontSize: 12),
                    ),
                  ),
                ),
                const SizedBox(width: 4),
                // Done and Close - close dialog and stay
                Expanded(
                  child: TextButton(
                    onPressed: () => Navigator.pop(dialogContext),
                    style: TextButton.styleFrom(
                      padding: const EdgeInsets.symmetric(
                        vertical: 8,
                        horizontal: 8,
                      ),
                    ),
                    child: const Text(
                      'Done & Close',
                      style: TextStyle(fontSize: 12),
                    ),
                  ),
                ),
                const SizedBox(width: 4),
                // Action button (Assign or Check In)
                Expanded(
                  child: currentTool.isAvailable
                      ? ElevatedButton(
                          onPressed: () {
                            Navigator.pop(dialogContext);
                            _showStaffSelectionDialog(currentTool.uniqueId);
                          },
                          style: ElevatedButton.styleFrom(
                            backgroundColor: MallonColors.primaryGreen,
                            padding: const EdgeInsets.symmetric(
                              vertical: 8,
                              horizontal: 8,
                            ),
                          ),
                          child: const Text(
                            'Assign',
                            style: TextStyle(fontSize: 12),
                          ),
                        )
                      : ElevatedButton(
                          onPressed: () {
                            Navigator.pop(dialogContext);
                            _handleAdminCheckIn(currentTool.uniqueId);
                          },
                          style: ElevatedButton.styleFrom(
                            backgroundColor: MallonColors.available,
                            padding: const EdgeInsets.symmetric(
                              vertical: 8,
                              horizontal: 8,
                            ),
                          ),
                          child: const Text(
                            'Check In',
                            style: TextStyle(fontSize: 12),
                          ),
                        ),
                ),
              ],
            ),
          ],
        ),
      );
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Error loading tool status: ${e.toString()}'),
            backgroundColor: MallonColors.error,
          ),
        );
      }
      return;
    }
  }

  /// Show staff tool dialog with read-only information
  Future<void> _showStaffToolDialog(Tool tool) async {
    try {
      final toolStatus = await _secureTransactionService
          .getReadableToolStatusInfo(tool.uniqueId);
      final toolHistory = await _secureTransactionService
          .getReadableToolHistory(tool.uniqueId);

      if (!mounted) return;

      // Show the actual tool dialog with loaded data
      await showDialog(
        context: context,
        barrierDismissible: true,
        barrierColor: Colors.black54,
        builder: (dialogContext) => AlertDialog(
          backgroundColor: Colors.white,
          title: Text(tool.displayName),
          content: SingleChildScrollView(
            child: Column(
              mainAxisSize: MainAxisSize.min,
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                _buildToolInfoSection(tool, toolStatus),
                const SizedBox(height: 16),
                _buildReadableToolHistorySection(toolHistory),
              ],
            ),
          ),
          actions: [
            // Three small buttons in a row
            Row(
              mainAxisSize: MainAxisSize.min,
              children: [
                // Done and New - scan another tool
                Expanded(
                  child: TextButton(
                    onPressed: () {
                      Navigator.pop(dialogContext);
                      // Reset scanner for next scan
                      context.read<ScanProvider>().resetDebounce();
                    },
                    style: TextButton.styleFrom(
                      padding: const EdgeInsets.symmetric(
                        vertical: 8,
                        horizontal: 8,
                      ),
                    ),
                    child: const Text(
                      'Done & New',
                      style: TextStyle(fontSize: 12),
                    ),
                  ),
                ),
                const SizedBox(width: 4),
                // Done and Close - close dialog and stay
                Expanded(
                  child: TextButton(
                    onPressed: () => Navigator.pop(dialogContext),
                    style: TextButton.styleFrom(
                      padding: const EdgeInsets.symmetric(
                        vertical: 8,
                        horizontal: 8,
                      ),
                    ),
                    child: const Text(
                      'Done & Close',
                      style: TextStyle(fontSize: 12),
                    ),
                  ),
                ),
                const SizedBox(width: 4),
                // Check In button (only if user can check in this tool)
                Expanded(
                  child:
                      (!tool.isAvailable &&
                          toolStatus?['assignedStaff']?.uid ==
                              _currentStaff?.uid)
                      ? ElevatedButton(
                          onPressed: () {
                            Navigator.pop(dialogContext);
                            _handleStaffCheckIn(tool.uniqueId);
                          },
                          style: ElevatedButton.styleFrom(
                            backgroundColor: MallonColors.available,
                            padding: const EdgeInsets.symmetric(
                              vertical: 8,
                              horizontal: 8,
                            ),
                          ),
                          child: const Text(
                            'Check In',
                            style: TextStyle(fontSize: 12),
                          ),
                        )
                      : Container(
                          // Empty container to maintain button layout
                          height: 36,
                        ),
                ),
              ],
            ),
          ],
        ),
      );
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Error loading tool details: ${e.toString()}'),
            backgroundColor: MallonColors.error,
          ),
        );
      }
      return;
    }
  }

  /// Handle single tool checkout

  /// Show batch submit dialog
  void _showBatchSubmitDialog() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('Batch Operation'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text('${_scannedTools.length} tools selected:'),
            const SizedBox(height: 8),
            Container(
              constraints: const BoxConstraints(maxHeight: 200),
              child: SingleChildScrollView(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: _scannedTools
                      .map(
                        (toolId) => Padding(
                          padding: const EdgeInsets.symmetric(vertical: 2),
                          child: Text('‚Ä¢ $toolId'),
                        ),
                      )
                      .toList(),
                ),
              ),
            ),
            const SizedBox(height: 16),
            Text('What would you like to do with these tools?'),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('Cancel'),
          ),
          ElevatedButton.icon(
            onPressed: () {
              Navigator.pop(context);
              _handleBatchCheckOut();
            },
            icon: const Icon(Icons.output),
            label: const Text('Check Out All'),
            style: ElevatedButton.styleFrom(
              backgroundColor: MallonColors.checkedOut,
            ),
          ),
          ElevatedButton.icon(
            onPressed: () {
              Navigator.pop(context);
              _handleBatchCheckIn();
            },
            icon: const Icon(Icons.input),
            label: const Text('Check In All'),
            style: ElevatedButton.styleFrom(
              backgroundColor: MallonColors.available,
            ),
          ),
        ],
      ),
    );
  }

  /// Handle batch checkout
  Future<void> _handleBatchCheckOut() async {
    final scanProvider = context.read<ScanProvider>();
    await scanProvider.processBatchCheckout();

    try {
      // For now, process each tool individually
      // In the future, you could use a batch transaction service
      int successCount = 0;
      int failCount = 0;
      List<String> errors = [];

      for (final toolId in _scannedTools) {
        try {
          // Get staff job code for readable transaction
          final staffJobCode = await _idMappingService.getStaffJobCodeFromUid(
            _currentStaff!.uid,
          );
          if (staffJobCode == null) {
            throw Exception('Staff job code not found');
          }

          final success = await _secureTransactionService.checkOutTool(
            toolUniqueId: toolId,
            staffJobCode: staffJobCode,
            adminName: _currentStaff?.fullName,
          );
          if (success) {
            successCount++;
          } else {
            failCount++;
          }
        } catch (e) {
          failCount++;
          errors.add(
            '$toolId: ${e.toString().replaceFirst('Exception: ', '')}',
          );
        }
      }

      // Show results
      final message = successCount > 0
          ? 'Batch checkout completed: $successCount success${failCount > 0 ? ', $failCount failed' : ''}'
          : 'Batch checkout failed: $failCount tools could not be checked out';

      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text(message),
          backgroundColor: successCount > 0
              ? MallonColors.successGreen
              : MallonColors.error,
          duration: const Duration(seconds: 4),
          action: errors.isNotEmpty
              ? SnackBarAction(
                  label: 'Details',
                  onPressed: () {
                    _showBatchErrorDialog('Checkout Errors', errors);
                  },
                )
              : null,
        ),
      );

      // Clear batch if all successful
      if (failCount == 0) {
        setState(() {
          _scannedTools.clear();
        });
      }
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('Batch checkout failed: ${e.toString()}'),
          backgroundColor: MallonColors.error,
          duration: const Duration(seconds: 4),
        ),
      );
    } finally {
      context.read<ScanProvider>().setProcessing(false);
    }
  }

  /// Handle batch checkin
  Future<void> _handleBatchCheckIn() async {
    if (_scannedTools.isEmpty) return;

    context.read<ScanProvider>().setProcessing(true);

    try {
      int successCount = 0;
      int failCount = 0;
      List<String> errors = [];

      for (final toolId in _scannedTools) {
        try {
          final success = await _secureTransactionService.checkInTool(
            toolUniqueId: toolId,
            adminName: _currentStaff?.fullName,
          );
          if (success) {
            successCount++;
          } else {
            failCount++;
          }
        } catch (e) {
          failCount++;
          errors.add(
            '$toolId: ${e.toString().replaceFirst('Exception: ', '')}',
          );
        }
      }

      // Show results
      final message = successCount > 0
          ? 'Batch checkin completed: $successCount success${failCount > 0 ? ', $failCount failed' : ''}'
          : 'Batch checkin failed: $failCount tools could not be checked in';

      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text(message),
          backgroundColor: successCount > 0
              ? MallonColors.successGreen
              : MallonColors.error,
          duration: const Duration(seconds: 4),
          action: errors.isNotEmpty
              ? SnackBarAction(
                  label: 'Details',
                  onPressed: () {
                    _showBatchErrorDialog('Checkin Errors', errors);
                  },
                )
              : null,
        ),
      );

      // Clear batch if all successful
      if (failCount == 0) {
        setState(() {
          _scannedTools.clear();
        });
      }
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('Batch checkin failed: ${e.toString()}'),
          backgroundColor: MallonColors.error,
          duration: const Duration(seconds: 4),
        ),
      );
    } finally {
      context.read<ScanProvider>().setProcessing(false);
    }
  }

  /// Show batch error details dialog
  void _showBatchErrorDialog(String title, List<String> errors) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text(title),
        content: Container(
          constraints: const BoxConstraints(maxHeight: 300),
          child: SingleChildScrollView(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: errors
                  .map(
                    (error) => Padding(
                      padding: const EdgeInsets.symmetric(vertical: 4),
                      child: Text(
                        error,
                        style: TextStyle(color: MallonColors.error),
                      ),
                    ),
                  )
                  .toList(),
            ),
          ),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('Close'),
          ),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Scan Tools'),
        actions: [
          // User status indicator
          if (_currentStaff != null)
            Tooltip(
              message:
                  '${_currentStaff!.fullName} (${_currentStaff!.role.name})',
              child: CircleAvatar(
                radius: 16,
                backgroundColor: MallonColors.primaryGreen,
                child: Text(
                  _currentStaff!.fullName.substring(0, 1).toUpperCase(),
                  style: const TextStyle(
                    color: Colors.white,
                    fontSize: 12,
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ),
            )
          else
            Tooltip(
              message: 'Not logged in',
              child: CircleAvatar(
                radius: 16,
                backgroundColor: MallonColors.error,
                child: const Icon(
                  Icons.person_off,
                  color: Colors.white,
                  size: 16,
                ),
              ),
            ),
          IconButton(
            onPressed: () {
              context.read<ScanProvider>().refreshStaff();
            },
            icon: const Icon(Icons.refresh),
            tooltip: 'Refresh login status',
          ),
          PopupMenuButton<String>(
            onSelected: (value) {
              if (value == 'debug') {
                Navigator.push(
                  context,
                  MaterialPageRoute(
                    builder: (context) => const AuthDebugScreen(),
                  ),
                );
              } else if (value == 'reset_scan') {
                context.read<ScanProvider>().resetDebounce();
                ScaffoldMessenger.of(context).showSnackBar(
                  const SnackBar(
                    content: Text('Scanner reset - ready for new scans'),
                    duration: Duration(seconds: 1),
                  ),
                );
              }
            },
            itemBuilder: (context) => [
              const PopupMenuItem(
                value: 'debug',
                child: Row(
                  children: [
                    Icon(Icons.bug_report),
                    SizedBox(width: 8),
                    Text('Debug Auth'),
                  ],
                ),
              ),
              const PopupMenuItem(
                value: 'reset_scan',
                child: Row(
                  children: [
                    Icon(Icons.refresh),
                    SizedBox(width: 8),
                    Text('Reset Scanner'),
                  ],
                ),
              ),
            ],
          ),
          Consumer<ScanProvider>(
            builder: (context, scanProvider, child) {
              return Switch(
                value: scanProvider.isBatchMode,
                onChanged: (value) {
                  scanProvider.setScanMode(
                    value ? ScanMode.batch : ScanMode.single,
                  );
                },
              );
            },
          ),
          const SizedBox(width: 8),
          Text('Batch', style: Theme.of(context).textTheme.bodyMedium),
          const SizedBox(width: 16),
        ],
        bottom: TabBar(
          controller: _tabController,
          tabs: const [
            Tab(icon: Icon(Icons.qr_code_scanner), text: 'Scan'),
            Tab(icon: Icon(Icons.list), text: 'Browse'),
          ],
        ),
      ),
      body: TabBarView(
        controller: _tabController,
        children: [_buildScannerTab(), _buildToolsListTab()],
      ),
    );
  }

  Widget _buildScannerTab() {
    return Column(
      children: [
        // Enhanced Scanner Area
        Expanded(
          flex: 2,
          child: Container(
            width: double.infinity,
            margin: const EdgeInsets.all(16),
            child: ToolScanner(
              onToolScanned: _handleScannedCode,
              batchMode: _batchMode,
            ),
          ),
        ),

        // Manual Input Section with Search Suggestions
        if (!_batchMode)
          Padding(
            padding: const EdgeInsets.all(16),
            child: Column(
              children: [
                Row(
                  children: [
                    const Text('Or search for a tool:'),
                    const SizedBox(width: 8),
                    Icon(
                      Icons.info_outline,
                      size: 16,
                      color: MallonColors.mediumGrey,
                    ),
                  ],
                ),
                const SizedBox(height: 4),
                Text(
                  'Type tool ID, name, brand, or model to see suggestions',
                  style: TextStyle(
                    fontSize: 12,
                    color: MallonColors.secondaryText,
                  ),
                ),
                const SizedBox(height: 12),
                _buildToolSearchField(),
              ],
            ),
          ),

        // Batch Mode Controls
        if (_batchMode) ...[
          // Batch Search Section
          Padding(
            padding: const EdgeInsets.all(16),
            child: Column(
              children: [
                Row(
                  children: [
                    const Text('Or search to add tools:'),
                    const SizedBox(width: 8),
                    Icon(
                      Icons.info_outline,
                      size: 16,
                      color: MallonColors.mediumGrey,
                    ),
                  ],
                ),
                const SizedBox(height: 4),
                Text(
                  'Type tool ID, name, brand, or model to see suggestions and add to batch',
                  style: TextStyle(
                    fontSize: 12,
                    color: MallonColors.secondaryText,
                  ),
                ),
                const SizedBox(height: 12),
                _buildBatchSearchField(),
              ],
            ),
          ),

          // Batch Tools List - Wrapped in Consumer for reactivity
          Consumer<ScanProvider>(
            builder: (context, scanProvider, child) {
              return Container(
                padding: const EdgeInsets.symmetric(horizontal: 16),
                child: Card(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Padding(
                        padding: const EdgeInsets.all(16),
                        child: Row(
                          children: [
                            Icon(
                              Icons.list_alt,
                              color: MallonColors.primaryGreen,
                            ),
                            const SizedBox(width: 8),
                            Text(
                              'Scanned Tools',
                              style: Theme.of(context).textTheme.titleMedium
                                  ?.copyWith(fontWeight: FontWeight.bold),
                            ),
                            const Spacer(),
                            Container(
                              padding: const EdgeInsets.symmetric(
                                horizontal: 12,
                                vertical: 6,
                              ),
                              decoration: BoxDecoration(
                                color: MallonColors.primaryGreen,
                                borderRadius: BorderRadius.circular(12),
                              ),
                              child: Text(
                                '${scanProvider.scannedTools.length}',
                                style: const TextStyle(
                                  color: Colors.white,
                                  fontWeight: FontWeight.bold,
                                ),
                              ),
                            ),
                          ],
                        ),
                      ),
                      _buildBatchToolsList(),
                    ],
                  ),
                ),
              );
            },
          ),

          Container(
            padding: const EdgeInsets.symmetric(horizontal: 16),
            child: Card(
              child: Padding(
                padding: const EdgeInsets.all(16),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      'Batch Actions',
                      style: Theme.of(context).textTheme.titleLarge?.copyWith(
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    const SizedBox(height: 16),

                    // Action Buttons
                    Consumer<ScanProvider>(
                      builder: (context, scanProvider, child) {
                        return Row(
                          children: [
                            Expanded(
                              child: OutlinedButton.icon(
                                onPressed: scanProvider.scannedTools.isEmpty
                                    ? null
                                    : () {
                                        scanProvider.clearBatch();
                                        ScaffoldMessenger.of(
                                          context,
                                        ).showSnackBar(
                                          SnackBar(
                                            content: const Text(
                                              'Batch cleared',
                                            ),
                                            duration: const Duration(
                                              seconds: 2,
                                            ),
                                            backgroundColor:
                                                MallonColors.warning,
                                          ),
                                        );
                                      },
                                icon: const Icon(Icons.clear_all),
                                label: const Text('Clear Batch'),
                              ),
                            ),
                            const SizedBox(width: 12),
                            Expanded(
                              child: ElevatedButton.icon(
                                onPressed:
                                    scanProvider.scannedTools.isEmpty ||
                                        _isProcessing
                                    ? null
                                    : () {
                                        _showBatchSubmitDialog();
                                      },
                                icon: _isProcessing
                                    ? const SizedBox(
                                        width: 16,
                                        height: 16,
                                        child: CircularProgressIndicator(
                                          strokeWidth: 2,
                                          valueColor:
                                              AlwaysStoppedAnimation<Color>(
                                                Colors.white,
                                              ),
                                        ),
                                      )
                                    : const Icon(Icons.assignment_ind),
                                label: Text(
                                  _isProcessing
                                      ? 'Processing...'
                                      : 'Continue to Assign',
                                ),
                                style: ElevatedButton.styleFrom(
                                  backgroundColor: MallonColors.primaryGreen,
                                  foregroundColor: Colors.white,
                                ),
                              ),
                            ),
                          ],
                        );
                      },
                    ),
                  ],
                ),
              ),
            ),
          ),
        ],

        // Scan Instructions
        Container(
          width: double.infinity,
          padding: const EdgeInsets.all(16),
          child: Card(
            color: _isProcessing
                ? MallonColors.lightGrey
                : MallonColors.lightGreen,
            child: Padding(
              padding: const EdgeInsets.all(16),
              child: Column(
                children: [
                  Icon(
                    _isProcessing ? Icons.hourglass_empty : Icons.info_outline,
                    color: _isProcessing
                        ? MallonColors.mediumGrey
                        : MallonColors.primaryGreen,
                  ),
                  const SizedBox(height: 8),
                  Text(
                    _isProcessing
                        ? 'Processing previous scan...'
                        : _batchMode
                        ? 'Scan multiple tools, then submit batch'
                        : 'Scan or enter a tool QR code to check out/in',
                    style: Theme.of(context).textTheme.bodyMedium?.copyWith(
                      color: _isProcessing
                          ? MallonColors.mediumGrey
                          : MallonColors.primaryGreen,
                    ),
                    textAlign: TextAlign.center,
                  ),
                ],
              ),
            ),
          ),
        ),
      ],
    );
  }

  Widget _buildToolSearchField() {
    return Consumer<ToolsProvider>(
      builder: (context, toolsProvider, child) {
        return Autocomplete<Tool>(
          optionsBuilder: (TextEditingValue textEditingValue) {
            if (textEditingValue.text.isEmpty || !toolsProvider.isLoaded) {
              return const Iterable<Tool>.empty();
            }

            // Use provider's memory-based search (much faster)
            final searchResults = toolsProvider.searchTools(
              textEditingValue.text,
            );
            return searchResults.take(10); // Limit to 10 suggestions
          },
          displayStringForOption: (Tool option) =>
              '${option.uniqueId} - ${option.displayName}',
          fieldViewBuilder: (context, controller, focusNode, onEditingComplete) {
            _manualSearchController.text = controller.text;
            return TextFormField(
              controller: controller,
              focusNode: focusNode,
              decoration: InputDecoration(
                hintText: 'Search by ID, name, brand... (e.g., T1234 or Drill)',
                prefixIcon: const Icon(Icons.search),
                border: OutlineInputBorder(
                  borderRadius: BorderRadius.circular(8),
                ),
                suffixIcon: controller.text.isNotEmpty
                    ? IconButton(
                        icon: const Icon(Icons.clear),
                        onPressed: () {
                          controller.clear();
                        },
                      )
                    : null,
              ),
              onFieldSubmitted: (value) {
                if (value.trim().isNotEmpty) {
                  // Use provider for tool lookup (much faster)
                  final toolsProvider = context.read<ToolsProvider>();

                  // Try exact match by unique ID first
                  Tool? exactMatch = toolsProvider.getToolByUniqueId(
                    value.trim(),
                  );

                  // If no exact match, try searching by name/brand
                  if (exactMatch == null) {
                    final searchResults = toolsProvider.searchTools(
                      value.trim(),
                    );
                    exactMatch = searchResults.isNotEmpty
                        ? searchResults.first
                        : null;
                  }

                  if (exactMatch != null) {
                    _handleScannedCode(exactMatch.uniqueId);
                  } else {
                    // Process the input directly - let the dialog system handle "not found"
                    _handleScannedCode(value.trim());
                  }
                }
              },
            );
          },
          optionsViewBuilder: (context, onSelected, options) {
            return Align(
              alignment: Alignment.topLeft,
              child: Material(
                elevation: 4.0,
                borderRadius: BorderRadius.circular(8),
                child: ConstrainedBox(
                  constraints: const BoxConstraints(
                    maxHeight: 300,
                    maxWidth: 400,
                  ),
                  child: ListView.builder(
                    padding: EdgeInsets.zero,
                    shrinkWrap: true,
                    itemCount: options.length,
                    itemBuilder: (context, index) {
                      final tool = options.elementAt(index);
                      return ListTile(
                        dense: true,
                        leading: CircleAvatar(
                          radius: 16,
                          backgroundColor: tool.isAvailable
                              ? MallonColors.available
                              : MallonColors.checkedOut,
                          child: const Icon(
                            Icons.build,
                            color: Colors.white,
                            size: 16,
                          ),
                        ),
                        title: Text(
                          tool.uniqueId,
                          style: const TextStyle(
                            fontWeight: FontWeight.bold,
                            fontSize: 14,
                          ),
                        ),
                        subtitle: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Text(
                              tool.displayName,
                              style: const TextStyle(fontSize: 12),
                              maxLines: 1,
                              overflow: TextOverflow.ellipsis,
                            ),
                            Text(
                              tool.isAvailable ? 'Available' : 'Checked Out',
                              style: TextStyle(
                                fontSize: 10,
                                color: tool.isAvailable
                                    ? MallonColors.available
                                    : MallonColors.checkedOut,
                                fontWeight: FontWeight.w500,
                              ),
                            ),
                          ],
                        ),
                        trailing: tool.isAvailable
                            ? const Icon(
                                Icons.check_circle,
                                color: Colors.green,
                                size: 16,
                              )
                            : const Icon(
                                Icons.access_time,
                                color: Colors.orange,
                                size: 16,
                              ),
                        onTap: () async {
                          onSelected(tool);

                          // Small delay to allow autocomplete to close first
                          await Future.delayed(
                            const Duration(milliseconds: 100),
                          );

                          if (mounted) {
                            _handleScannedCode(tool.uniqueId);
                          }
                        },
                      );
                    },
                  ),
                ),
              ),
            );
          },
        );
      },
    );
  }

  Widget _buildBatchSearchField() {
    return Consumer<ToolsProvider>(
      builder: (context, toolsProvider, child) {
        return Autocomplete<Tool>(
          optionsBuilder: (TextEditingValue textEditingValue) {
            if (textEditingValue.text.isEmpty || !toolsProvider.isLoaded) {
              return const Iterable<Tool>.empty();
            }

            // Use provider's memory-based search (much faster)
            final searchResults = toolsProvider.searchTools(
              textEditingValue.text,
            );
            return searchResults.take(15); // Show more options for batch mode
          },
          displayStringForOption: (Tool option) =>
              '${option.uniqueId} - ${option.displayName}',
          fieldViewBuilder:
              (context, controller, focusNode, onEditingComplete) {
                return TextFormField(
                  controller: controller,
                  focusNode: focusNode,
                  decoration: InputDecoration(
                    hintText:
                        'Search by ID, name, brand... (e.g., T1234 or Drill)',
                    prefixIcon: const Icon(Icons.search),
                    border: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(8),
                    ),
                    suffixIcon: controller.text.isNotEmpty
                        ? IconButton(
                            icon: const Icon(Icons.clear),
                            onPressed: () {
                              controller.clear();
                            },
                          )
                        : null,
                  ),
                  onFieldSubmitted: (value) {
                    if (value.trim().isNotEmpty) {
                      _addToolToBatch(value.trim(), controller);
                    }
                  },
                );
              },
          optionsViewBuilder: (context, onSelected, options) {
            return Align(
              alignment: Alignment.topLeft,
              child: Material(
                elevation: 4.0,
                borderRadius: BorderRadius.circular(8),
                child: ConstrainedBox(
                  constraints: const BoxConstraints(
                    maxHeight: 350,
                    maxWidth: 450,
                  ),
                  child: ListView.builder(
                    padding: EdgeInsets.zero,
                    shrinkWrap: true,
                    itemCount: options.length,
                    itemBuilder: (context, index) {
                      final tool = options.elementAt(index);
                      final isAlreadyInBatch = _scannedTools.contains(
                        tool.uniqueId,
                      );

                      return ListTile(
                        dense: true,
                        leading: CircleAvatar(
                          radius: 16,
                          backgroundColor: isAlreadyInBatch
                              ? MallonColors.mediumGrey
                              : (tool.isAvailable
                                    ? MallonColors.available
                                    : MallonColors.checkedOut),
                          child: isAlreadyInBatch
                              ? const Icon(
                                  Icons.check,
                                  color: Colors.white,
                                  size: 16,
                                )
                              : Text(
                                  tool.uniqueId.substring(
                                    tool.uniqueId.length - 2,
                                  ),
                                  style: const TextStyle(
                                    color: Colors.white,
                                    fontSize: 10,
                                    fontWeight: FontWeight.bold,
                                  ),
                                ),
                        ),
                        title: Text(
                          tool.uniqueId,
                          style: TextStyle(
                            fontWeight: FontWeight.bold,
                            fontSize: 14,
                            color: isAlreadyInBatch
                                ? MallonColors.secondaryText
                                : null,
                          ),
                        ),
                        subtitle: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Text(
                              tool.displayName,
                              style: TextStyle(
                                fontSize: 12,
                                color: isAlreadyInBatch
                                    ? MallonColors.secondaryText
                                    : null,
                              ),
                              maxLines: 1,
                              overflow: TextOverflow.ellipsis,
                            ),
                            Row(
                              children: [
                                Text(
                                  tool.isAvailable
                                      ? 'Available'
                                      : 'Checked Out',
                                  style: TextStyle(
                                    fontSize: 10,
                                    color: isAlreadyInBatch
                                        ? MallonColors.secondaryText
                                        : (tool.isAvailable
                                              ? MallonColors.available
                                              : MallonColors.checkedOut),
                                    fontWeight: FontWeight.w500,
                                  ),
                                ),
                                if (isAlreadyInBatch) ...[
                                  const SizedBox(width: 8),
                                  Text(
                                    '‚Ä¢ Already added',
                                    style: TextStyle(
                                      fontSize: 10,
                                      color: MallonColors.secondaryText,
                                      fontStyle: FontStyle.italic,
                                    ),
                                  ),
                                ],
                              ],
                            ),
                          ],
                        ),
                        trailing: isAlreadyInBatch
                            ? Icon(
                                Icons.check_circle,
                                color: MallonColors.successGreen,
                                size: 16,
                              )
                            : (tool.isAvailable
                                  ? const Icon(
                                      Icons.add_circle_outline,
                                      color: Colors.green,
                                      size: 16,
                                    )
                                  : const Icon(
                                      Icons.access_time,
                                      color: Colors.orange,
                                      size: 16,
                                    )),
                        onTap: isAlreadyInBatch
                            ? null
                            : () async {
                                onSelected(tool);

                                // Small delay to allow autocomplete to close first
                                await Future.delayed(
                                  const Duration(milliseconds: 100),
                                );

                                if (mounted) {
                                  _addToolToBatch(tool.uniqueId, null);
                                }
                              },
                      );
                    },
                  ),
                ),
              ),
            );
          },
        );
      },
    );
  }

  void _addToolToBatch(String input, TextEditingController? controller) async {
    final toolsProvider = context.read<ToolsProvider>();

    // Try exact match by unique ID first
    Tool? exactMatch = toolsProvider.getToolByUniqueId(input.trim());

    // If no exact match, try searching by name/brand
    if (exactMatch == null) {
      final searchResults = toolsProvider.searchTools(input.trim());
      exactMatch = searchResults.isNotEmpty ? searchResults.first : null;
    }

    if (exactMatch != null) {
      // Use the same validation flow as scanning
      await _handleBatchModeResult(exactMatch.uniqueId, true);
    } else {
      // Show tool not found dialog
      _isDialogShowing = true;
      await _showBatchToolNotFoundDialog(input.trim());
      _isDialogShowing = false;
    }

    // Clear the search field
    if (controller != null) {
      controller.clear();
    }
  }

  Widget _buildToolsListTab() {
    return Column(
      children: [
        // Search Bar
        Padding(
          padding: const EdgeInsets.all(16),
          child: TextField(
            controller: _searchController,
            decoration: InputDecoration(
              hintText: 'Search tools by name, brand, model...',
              prefixIcon: const Icon(Icons.search),
              border: OutlineInputBorder(
                borderRadius: BorderRadius.circular(8),
              ),
              suffixIcon: _searchQuery.isNotEmpty
                  ? IconButton(
                      icon: const Icon(Icons.clear),
                      onPressed: () {
                        _searchController.clear();
                        setState(() {
                          _searchQuery = '';
                        });
                      },
                    )
                  : null,
            ),
            onChanged: (value) {
              setState(() {
                _searchQuery = value;
              });
            },
          ),
        ),

        // Filter Chips and Info
        Padding(
          padding: const EdgeInsets.symmetric(horizontal: 16),
          child: Row(
            children: [
              Expanded(
                child: SingleChildScrollView(
                  scrollDirection: Axis.horizontal,
                  child: Row(
                    children: [
                      _buildFilterChip('All', 'all'),
                      const SizedBox(width: 8),
                      _buildFilterChip('Available', 'available'),
                      const SizedBox(width: 8),
                      _buildFilterChip('Checked Out', 'checked_out'),
                    ],
                  ),
                ),
              ),
              if (_batchMode)
                Consumer<ScanProvider>(
                  builder: (context, scanProvider, child) {
                    return AnimatedContainer(
                      duration: const Duration(milliseconds: 300),
                      padding: const EdgeInsets.symmetric(
                        horizontal: 12,
                        vertical: 6,
                      ),
                      decoration: BoxDecoration(
                        color: scanProvider.batchCount > 0
                            ? MallonColors.primaryGreen.withOpacity(0.2)
                            : MallonColors.primaryGreen.withOpacity(0.1),
                        borderRadius: BorderRadius.circular(16),
                        border: Border.all(
                          color: MallonColors.primaryGreen,
                          width: scanProvider.batchCount > 0 ? 2 : 1,
                        ),
                      ),
                      child: Row(
                        mainAxisSize: MainAxisSize.min,
                        children: [
                          Icon(
                            Icons.inventory_2,
                            size: 14,
                            color: MallonColors.primaryGreen,
                          ),
                          const SizedBox(width: 4),
                          Text(
                            '${scanProvider.batchCount}',
                            style: TextStyle(
                              color: MallonColors.primaryGreen,
                              fontWeight: FontWeight.bold,
                              fontSize: 14,
                            ),
                          ),
                        ],
                      ),
                    );
                  },
                ),
            ],
          ),
        ),
        const SizedBox(height: 8),

        // Tools List
        Expanded(
          child: Consumer<ToolsProvider>(
            builder: (context, toolsProvider, child) {
              if (toolsProvider.isLoading) {
                return const Center(child: CircularProgressIndicator());
              }

              if (toolsProvider.hasError) {
                return Center(
                  child: Column(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      Icon(
                        Icons.error_outline,
                        size: 64,
                        color: MallonColors.error,
                      ),
                      const SizedBox(height: 16),
                      Text(
                        'Error loading tools',
                        style: Theme.of(context).textTheme.titleLarge,
                      ),
                      const SizedBox(height: 8),
                      Text('${toolsProvider.errorMessage}'),
                      const SizedBox(height: 16),
                      ElevatedButton(
                        onPressed: () => toolsProvider.retry(),
                        child: const Text('Retry'),
                      ),
                    ],
                  ),
                );
              }

              // Get filtered tools from provider (memory-based, instant)
              final tools = toolsProvider.getFilteredTools(
                status: _selectedFilter == 'all' ? null : _selectedFilter,
                searchQuery: _searchQuery.trim(),
              );

              if (tools.isEmpty) {
                return Center(
                  child: Column(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      Icon(
                        Icons.build_outlined,
                        size: 64,
                        color: MallonColors.mediumGrey,
                      ),
                      const SizedBox(height: 16),
                      Text(
                        'No tools found',
                        style: Theme.of(context).textTheme.titleLarge,
                      ),
                      const SizedBox(height: 8),
                      Text(
                        _searchQuery.isNotEmpty
                            ? 'Try adjusting your search'
                            : 'Add some tools to get started',
                        style: TextStyle(color: MallonColors.secondaryText),
                      ),
                    ],
                  ),
                );
              }

              return ListView.builder(
                itemCount: tools.length,
                itemBuilder: (context, index) {
                  final tool = tools[index];
                  return _buildToolTile(tool);
                },
              );
            },
          ),
        ),
      ],
    );
  }

  Widget _buildFilterChip(String label, String value) {
    final isSelected = value == _selectedFilter;
    return FilterChip(
      label: Text(label),
      selected: isSelected,
      onSelected: (selected) {
        setState(() {
          _selectedFilter = value;
        });
      },
      selectedColor: MallonColors.lightGreen,
      checkmarkColor: MallonColors.primaryGreen,
    );
  }

  Widget _buildToolTile(Tool tool) {
    return Card(
      margin: const EdgeInsets.symmetric(horizontal: 16, vertical: 4),
      child: ListTile(
        leading: CircleAvatar(
          backgroundColor: tool.isAvailable
              ? MallonColors.available
              : MallonColors.checkedOut,
          child: Icon(Icons.build, color: Colors.white, size: 20),
        ),
        title: Text(
          tool.displayName,
          style: const TextStyle(fontWeight: FontWeight.w600),
        ),
        subtitle: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text('ID: ${tool.uniqueId}'),
            if (tool.num.isNotEmpty) Text('Tool #: ${tool.num}'),
          ],
        ),
        trailing: Container(
          padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
          decoration: BoxDecoration(
            color: tool.isAvailable
                ? MallonColors.available.withOpacity(0.1)
                : MallonColors.checkedOut.withOpacity(0.1),
            borderRadius: BorderRadius.circular(12),
            border: Border.all(
              color: tool.isAvailable
                  ? MallonColors.available
                  : MallonColors.checkedOut,
            ),
          ),
          child: Text(
            tool.isAvailable ? 'AVAILABLE' : 'CHECKED OUT',
            style: TextStyle(
              color: tool.isAvailable
                  ? MallonColors.available
                  : MallonColors.checkedOut,
              fontSize: 10,
              fontWeight: FontWeight.bold,
            ),
          ),
        ),
        onTap: () => _handleToolSelection(tool),
      ),
    );
  }

  void _handleToolSelection(Tool tool) async {
    if (_batchMode) {
      // Use the same validation flow as scanning
      await _handleBatchModeResult(tool.uniqueId, true);
    } else {
      _showSingleToolDialog(tool.uniqueId);
    }
  }

  /// Build tool information section for dialogs
  Widget _buildToolInfoSection(Tool tool, Map<String, dynamic>? toolStatus) {
    final assignedStaff = toolStatus?['assignedStaff'] as Staff?;

    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text('Tool ID: ${tool.uniqueId}'),
        if (tool.num.isNotEmpty) Text('Tool #: ${tool.num}'),
        Text('Brand: ${tool.brand}'),
        Text('Model: ${tool.model}'),
        const SizedBox(height: 8),
        Row(
          children: [
            Text('Status: '),
            Container(
              padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
              decoration: BoxDecoration(
                color: tool.isAvailable
                    ? MallonColors.available.withOpacity(0.1)
                    : MallonColors.checkedOut.withOpacity(0.1),
                borderRadius: BorderRadius.circular(12),
                border: Border.all(
                  color: tool.isAvailable
                      ? MallonColors.available
                      : MallonColors.checkedOut,
                ),
              ),
              child: Text(
                tool.isAvailable ? 'AVAILABLE' : 'CHECKED OUT',
                style: TextStyle(
                  color: tool.isAvailable
                      ? MallonColors.available
                      : MallonColors.checkedOut,
                  fontSize: 12,
                  fontWeight: FontWeight.bold,
                ),
              ),
            ),
          ],
        ),
        if (!tool.isAvailable && assignedStaff != null) ...[
          const SizedBox(height: 8),
          Text('Assigned to: ${assignedStaff.fullName}'),
          Text('Job Code: ${assignedStaff.jobCode}'),
        ],
      ],
    );
  }

  /// Build tool history section
  Widget _buildReadableToolHistorySection(List<Map<String, dynamic>> history) {
    if (history.isEmpty) {
      return Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            'Recent History',
            style: Theme.of(
              context,
            ).textTheme.titleMedium?.copyWith(fontWeight: FontWeight.bold),
          ),
          const SizedBox(height: 8),
          Text(
            'No history available',
            style: TextStyle(color: MallonColors.secondaryText),
          ),
        ],
      );
    }

    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          'Recent History',
          style: Theme.of(
            context,
          ).textTheme.titleMedium?.copyWith(fontWeight: FontWeight.bold),
        ),
        const SizedBox(height: 8),
        ...history
            .take(3)
            .map(
              (entry) => Padding(
                padding: const EdgeInsets.only(bottom: 4),
                child: Row(
                  children: [
                    Icon(
                      entry['action'] == 'checkout'
                          ? Icons.output
                          : Icons.input,
                      size: 16,
                      color: entry['action'] == 'checkout'
                          ? MallonColors.checkedOut
                          : MallonColors.available,
                    ),
                    const SizedBox(width: 8),
                    Expanded(
                      child: Text(
                        '${entry['action']} by ${entry['metadata']?['staffName'] ?? entry['staffId'] ?? 'Unknown'}',
                        style: const TextStyle(fontSize: 12),
                      ),
                    ),
                  ],
                ),
              ),
            ),
      ],
    );
  }

  /// Show staff selection dialog for admin/supervisor
  Future<void> _showStaffSelectionDialog(String toolId) async {
    try {
      // Use StaffProvider instead of direct service (much faster with cached data)
      final staffProvider = context.read<StaffProvider>();
      List<Staff> staffList = staffProvider.activeStaff;

      // If no staff loaded, fall back to service
      if (staffList.isEmpty) {
        staffList = await _staffService.getActiveStaffStream().first;
      }

      if (!mounted) return;

      // Now show the staff selection dialog with loaded data
      showDialog(
        context: context,
        barrierDismissible: true,
        barrierColor: Colors.black54,
        builder: (dialogContext) => AlertDialog(
          backgroundColor: Colors.white,
          title: const Text('Assign Tool to Staff'),
          content: SizedBox(
            width: double.maxFinite,
            child: ListView.builder(
              shrinkWrap: true,
              itemCount: staffList.length,
              itemBuilder: (context, index) {
                final staff = staffList[index];
                if (!staff.isActive) return const SizedBox.shrink();

                return ListTile(
                  leading: CircleAvatar(
                    backgroundColor: MallonColors.primaryGreen,
                    child: Text(
                      staff.fullName.substring(0, 1).toUpperCase(),
                      style: const TextStyle(color: Colors.white),
                    ),
                  ),
                  title: Text(staff.fullName),
                  subtitle: Text(
                    '${staff.jobCode} ‚Ä¢ ${staff.role.name.toUpperCase()}',
                  ),
                  onTap: () {
                    Navigator.pop(
                      dialogContext,
                    ); // Use dialogContext for proper closure
                    _handleAdminCheckOut(toolId, staff.jobCode);
                  },
                );
              },
            ),
          ),
          actions: [
            TextButton(
              onPressed: () =>
                  Navigator.pop(dialogContext), // Use dialogContext
              child: const Text('Cancel'),
            ),
          ],
        ),
      );
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Error loading staff list: ${e.toString()}'),
            backgroundColor: MallonColors.error,
          ),
        );
      }
      return;
    }
  }

  /// Handle admin checkout to specific staff using readable IDs
  Future<void> _handleAdminCheckOut(String toolId, String staffJobCode) async {
    context.read<ScanProvider>().setProcessing(true);

    try {
      final success = await _secureTransactionService.checkOutTool(
        toolUniqueId: toolId,
        staffJobCode: staffJobCode,
        notes: 'Assigned by ${_currentStaff?.fullName}',
        adminName: _currentStaff?.fullName,
      );

      if (success) {
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text('Successfully assigned $toolId to staff'),
              backgroundColor: MallonColors.successGreen,
              duration: const Duration(seconds: 2),
            ),
          );

          // Reset scanner for next scan after a short delay
          Future.delayed(const Duration(milliseconds: 500), () {
            if (mounted) {
              context.read<ScanProvider>().resetDebounce();
              _resetDialogState(); // Ensure dialog state is reset for next scan
            }
          });
        }
      } else {
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text('Failed to assign $toolId'),
              backgroundColor: MallonColors.error,
            ),
          );
        }
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Error: $e'),
            backgroundColor: MallonColors.error,
          ),
        );
      }
    } finally {
      context.read<ScanProvider>().setProcessing(false);
    }
  }

  /// Handle admin check-in using readable IDs
  Future<void> _handleAdminCheckIn(String toolId) async {
    context.read<ScanProvider>().setProcessing(true);

    try {
      final success = await _secureTransactionService.checkInTool(
        toolUniqueId: toolId,
        notes: 'Checked in by admin ${_currentStaff?.fullName}',
        adminName: _currentStaff?.fullName,
      );

      if (success) {
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text('Successfully checked in $toolId'),
              backgroundColor: MallonColors.successGreen,
              duration: const Duration(seconds: 2),
            ),
          );

          // Reset scanner for next scan after a short delay
          Future.delayed(const Duration(milliseconds: 500), () {
            if (mounted) {
              context.read<ScanProvider>().resetDebounce();
              _resetDialogState(); // Ensure dialog state is reset for next scan
            }
          });
        }
      } else {
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text('Failed to check in $toolId'),
              backgroundColor: MallonColors.error,
            ),
          );
        }
      }
    } catch (e) {
      if (mounted) {
        String errorMessage = e.toString();
        if (errorMessage.contains('Tool is already available')) {
          errorMessage =
              'Tool $toolId is already checked in and available. You can assign it to a staff member instead.';
        } else {
          errorMessage =
              'Error checking in tool: ${errorMessage.replaceFirst('Exception: ', '')}';
        }

        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text(errorMessage),
            backgroundColor: MallonColors.warning,
            duration: const Duration(seconds: 4),
            action: errorMessage.contains('already checked in')
                ? SnackBarAction(
                    label: 'Assign Staff',
                    onPressed: () => _showStaffSelectionDialog(toolId),
                  )
                : null,
          ),
        );
      }
    } finally {
      context.read<ScanProvider>().setProcessing(false);
    }
  }

  /// Handle staff check-in (only their own tools) using readable IDs
  Future<void> _handleStaffCheckIn(String toolId) async {
    context.read<ScanProvider>().setProcessing(true);

    try {
      final success = await _secureTransactionService.checkInTool(
        toolUniqueId: toolId,
        adminName: _currentStaff?.fullName,
      );

      if (success) {
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text('Successfully checked in $toolId'),
              backgroundColor: MallonColors.successGreen,
              duration: const Duration(seconds: 2),
            ),
          );

          // Reset scanner for next scan after a short delay
          Future.delayed(const Duration(milliseconds: 500), () {
            if (mounted) {
              context.read<ScanProvider>().resetDebounce();
              _resetDialogState(); // Ensure dialog state is reset for next scan
            }
          });
        }
      } else {
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text('Failed to check in $toolId'),
              backgroundColor: MallonColors.error,
            ),
          );
        }
      }
    } catch (e) {
      if (mounted) {
        String errorMessage = e.toString();
        if (errorMessage.contains('Tool is already available')) {
          errorMessage = 'Tool $toolId is already checked in and available.';
        } else {
          errorMessage =
              'Error checking in tool: ${errorMessage.replaceFirst('Exception: ', '')}';
        }

        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text(errorMessage),
            backgroundColor: MallonColors.warning,
            duration: const Duration(seconds: 3),
          ),
        );
      }
    } finally {
      context.read<ScanProvider>().setProcessing(false);
    }
  }

  Widget _buildBatchToolsList() {
    return Consumer<ScanProvider>(
      builder: (context, scanProvider, child) {
        final scannedTools = scanProvider.scannedTools;

        if (scannedTools.isEmpty) {
          return Container(
            padding: const EdgeInsets.all(16),
            child: Column(
              children: [
                Icon(
                  Icons.qr_code_scanner,
                  size: 48,
                  color: MallonColors.mediumGrey,
                ),
                const SizedBox(height: 8),
                Text(
                  'No tools scanned yet',
                  style: TextStyle(
                    color: MallonColors.mediumGrey,
                    fontSize: 16,
                  ),
                ),
                const SizedBox(height: 4),
                Text(
                  'Start scanning QR codes to add tools to your batch',
                  style: TextStyle(
                    color: MallonColors.secondaryText,
                    fontSize: 12,
                  ),
                  textAlign: TextAlign.center,
                ),
              ],
            ),
          );
        }

        return Container(
          constraints: const BoxConstraints(maxHeight: 300),
          child: ListView.builder(
            shrinkWrap: true,
            itemCount: scannedTools.length,
            itemBuilder: (context, index) {
              final toolId = scannedTools[index];

              return Consumer<ToolsProvider>(
                builder: (context, toolsProvider, child) {
                  final tool = toolsProvider.allTools
                      .where(
                        (t) => t.uniqueId.toUpperCase() == toolId.toUpperCase(),
                      )
                      .firstOrNull;

                  return Card(
                    margin: const EdgeInsets.symmetric(
                      horizontal: 8,
                      vertical: 4,
                    ),
                    child: ListTile(
                      leading: CircleAvatar(
                        backgroundColor: MallonColors.primaryGreen,
                        child: Text(
                          '${index + 1}',
                          style: const TextStyle(
                            color: Colors.white,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                      ),
                      title: Text(
                        tool?.displayName ?? toolId,
                        style: const TextStyle(fontWeight: FontWeight.bold),
                      ),
                      subtitle: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text('ID: $toolId'),
                          if (tool != null) ...[
                            Text('Brand: ${tool.brand}'),
                            Text('Model: ${tool.model}'),
                            Text('Status: ${tool.status}'),
                          ],
                        ],
                      ),
                      trailing: IconButton(
                        icon: Icon(
                          Icons.remove_circle,
                          color: MallonColors.error,
                        ),
                        onPressed: () {
                          _removeBatchTool(toolId);
                        },
                        tooltip: 'Remove from batch',
                      ),
                      isThreeLine: tool != null,
                    ),
                  );
                },
              );
            },
          ),
        );
      },
    );
  }

  void _removeBatchTool(String toolId) {
    final scanProvider = context.read<ScanProvider>();
    scanProvider.removeFromBatch(toolId);

    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('Removed $toolId from batch'),
        duration: const Duration(seconds: 2),
        backgroundColor: MallonColors.warning,
      ),
    );
  }
}
